-- 1. 모든 사원의 LAST_NAME, SALARY, 본인이 근무하는 부서의 평균연봉(SALARY)을 조회하시오.
SELECT LAST_NAME, SALARY,
    (SELECT AVG(ME.SALARY) AS 평균연봉 
    FROM EMPLOYEES ME 
    WHERE ME.DEPARTMENT_ID = YOU.DEPARTMENT_ID) 
FROM 
    EMPLOYEES YOU;

-- 2. 부서(DEPARTMENT_ID)별로 DEPARTMENT_ID, DEPARTMENT_NAME, 평균연봉을 조회하시오.
SELECT DEPARTMENT_ID, DEPARTMENT_NAME, 
    (SELECT ROUND(AVG(E.SALARY),2) FROM EMPLOYEES E WHERE E.DEPARTMENT_ID = D.DEPARTMENT_ID)AS 평균연봉 
FROM DEPARTMENTS D group by DEPARTMENT_ID, DEPARTMENT_NAME ORDER BY DEPARTMENT_ID;

-- 3. 모든 사원들의 EMPLOYEE_ID, LAST_NAME, DEPARTMENT_NAME을 조회하시오.
SELECT E.EMPLOYEE_ID, E.LAST_NAME, D.DEPARTMENT_NAME 
FROM EMPLOYEES E INNER JOIN DEPARTMENTS D 
ON E.DEPARTMENT_ID = D.DEPARTMENT_ID ORDER BY EMPLOYEE_ID;

SELECT E.EMPLOYEE_ID, E.LAST_NAME, (SELECT D.DEPARTMENT_NAME FROM DEPARTMENTS D WHERE D.DEPARTMENT_ID = E.DEPARTMENT_ID)
FROM EMPLOYEES E;

-- 4. 평균연봉 이상의 연봉을 받는 사원들의 정보를 조회하시오.
SELECT * FROM EMPLOYEES WHERE SALARY >= (SELECT AVG(SALARY) FROM EMPLOYEES);

-- 5. PATRICK SULLY와 같은 부서에 근무하는 모든 사원정보를 조회하시오.
SELECT * FROM EMPLOYEES WHERE DEPARTMENT_ID = (SELECT DEPARTMENT_ID FROM EMPLOYEES WHERE FIRST_NAME = 'Patrick' AND LAST_NAME = 'Sully');

-- 6. 부서번호가 20인 사원들 중에서 평균연봉 이상의 연봉을 받는 사원정보를 조회하시오.
SELECT * FROM EMPLOYEES WHERE DEPARTMENT_ID = 20 AND SALARY >= (SELECT AVG(SALARY) FROM EMPLOYEES);

-- 7. 'PU_MAN'의 최대 연봉보다 더 많은 연봉을 받는 사원들의 정보를 조회하시오.
SELECT * FROM EMPLOYEES WHERE SALARY > (SELECT MAX_SALARY FROM JOBS WHERE JOB_ID = 'PU_MAN');

-- 8. 사원번호가 131인 사원의 JOB_ID와 SALARY가 모두 일치하는 사원들의 정보를 조회하시오.
SELECT * FROM EMPLOYEES WHERE (JOB_ID, SALARY) = (SELECT JOB_ID, SALARY FROM EMPLOYEES WHERE EMPLOYEE_ID = 131);

-- 9. LOCATION_ID가 1000 ~ 1900인 국가들의 COUNTRY_ID와 COUNTRY_NAME을 조회하시오.
SELECT COUNTRY_ID, COUNTRY_NAME FROM COUNTRIES WHERE COUNTRY_ID IN(SELECT COUNTRY_ID FROM LOCATIONS WHERE LOCATION_ID BETWEEN 1000 AND 1900 );

-- 10. 부서가 'Executive'인 모든 사원들의 정보를 조회하시오.
-- 서브쿼리의 WHERE절에서 사용한 DEPARTMENT_NAME은 PK, UQ가 아니므로 서브쿼리의 결과는 여러 개이다.
SELECT * FROM EMPLOYEES WHERE DEPARTMENT_ID IN (SELECT DEPARTMENT_ID FROM DEPARTMENTS WHERE DEPARTMENT_NAME = 'Executive');
                                                -- IN (다중행) -> DEPARTMENT_NAME이 UNIQUE나 PK가 아니기에 다중행이 나올 수 있어 IN 을 사용함

-- 11. 부서번호가 30인 사원들중에서 부서번호가 50인 사원들의 최대연봉보다 더 많은 연봉을 받는 사원들을 조회하시오.
SELECT * FROM EMPLOYEES WHERE DEPARTMENT_ID = 30 AND SALARY >(SELECT MAX(SALARY) FROM EMPLOYEES WHERE DEPARTMENT_ID = 50);

SELECT * FROM EMPLOYEES WHERE DEPARTMENT_ID = 30 AND SALARY > ALL(SELECT SALARY FROM EMPLOYEES WHERE DEPARTMENT_ID = 50);
                                                            -- 부서번호가 50인 모든 SALARY보다 큰 SALARY | MAX사용 안함 
-- 12. MANAGER가 아닌 사원들의 정보를 조회하시오.
SELECT * FROM EMPLOYEES WHERE MANAGER_ID NOT IN (SELECT DISTINCT MANAGER_ID FROM DEPARTMENTS WHERE MANAGER_ID IS NOT NULL);

SELECT * FROM EMPLOYEES E WHERE NOT EXISTS(SELECT M.MANAGER_ID FROM DEPARTMENTS M WHERE E.EMPLOYEE_ID = M.MANAGER_ID);
                                                                                -- 사원 번호 = 매니저번호 (매니저라는 의미)

-- 13. 근무지가 'Southlake'인 사원들의 정보를 조회하시오.
SELECT * FROM EMPLOYEES E 
INNER JOIN DEPARTMENTS D ON E.DEPARTMENT_ID = D.DEPARTMENT_ID 
INNER JOIN LOCATIONS L ON D.LOCATION_ID = L.LOCATION_ID WHERE L.CITY = 'Southlake'; 

SELECT * FROM EMPLOYEES E, DEPARTMENTS D, LOCATIONS L 
    WHERE E.DEPARTMENT_ID = D.DEPARTMENT_ID AND D.LOCATION_ID = L.LOCATION_ID AND L.CITY = 'Southlake';

-- 14. 부서명의 가나다순으로 모든 사원의 정보를 조회하시오.
SELECT * FROM EMPLOYEES E ORDER BY 
(SELECT D.DEPARTMENT_NAME FROM DEPARTMENTS D WHERE E.DEPARTMENT_ID = D.DEPARTMENT_ID);
-- SUBQUERY에서의 ORDER BY는 사용이 불가능하다. 00907오류가 나타난다.
-- ORDER BY를 바깥에서 선언하는게 좋다.

-- 15. 가장 많은 사원들이 근무하고 있는 부서의 번호와 근무하는 인원수를 조회하시오.
SELECT COUNT(*), DEPARTMENT_ID FROM EMPLOYEES GROUP BY DEPARTMENT_ID HAVING COUNT(*) = (SELECT MAX(COUNT(*)) FROM EMPLOYEES GROUP BY DEPARTMENT_ID);


