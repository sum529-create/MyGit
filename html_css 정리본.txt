# get / post
- get
  디폴트 방식. 정보 노출, 보안 취약, 빠름
- post
  보안 우수, 느림, 정보 노출 안함

<!-- 
	form 속성
		
	1. action: 입력 데이터를 어디로 보낼 것인가?		-- https://도메인/project[context root, context path]/~action~
	2. method
		1) get	: 보안이 필요하지 않을 때, 단순검색, 디폴트
		2) post : 보안이 필요할 때(로그인, 회원가입)
-->


# fieldset -  legend 감싸기
- <legend>값</legend>
- <input type="checkbox/radio" name="동일값" value="각각값">이름

# select[name] multiple - option[value]
# input[type="text" list="datalist랑 동일한 아이디"]
    datalist[id] - option[value]

# textarea[row, cols, name]

# input[id]
   label[for:"input id동일"]





-------------------------------- css ---------------------------------------------------



# selector
	h3 ~ div{ /* h3 태그의 모든 div 동생 태그들이 선택된다. */

	h3 + div{	/* h3 태그에 바로 아래 div 태그만 선택된다. */

	/* type 속성 값이 text가 아닌 모든 form 태그 아래 input 태그들 */
	form > input:not([type = text]){

	/*  src 속성이 jpg로 끝나는 img 태그 */
	img[src$=jpg]{

	/*attribute 속성이 value로 시작하는 E*/
	E[attribute^="value"]	

	/*attribute 속성이 value로 포함하는 E*/
	E[attribute*="value"]	


	/* 방문하기 전 링크를 검정색으로 표현 */
	h3 > a:link{

	/* 방문 후 링크를 회색으로 표현 */
	h3 > a:visited{

	/* 마우스를 클릭할 때 주황으로 표현 */
	h3 > a:active{

	/* 마우스를 가져다대면 글꼴을 굵게 표현 */
	h3 > a:hover{

	/* type 속성이 "radio"인 모든 input 태그 중 선택된 태그 */
	input[type = "radio"]:focus{
	
	/* type이 "radio"인 모든 input 태그 중 checked 된 태그 뒤의 label 태그 */
	input[type = "radio"]:checked + label{


	h1:first-of-type{

	body > h1:last-of-type{

	body > h1:nth-of-type(2n+1){


# gradient
	background-image: linear-gradient(to top left, hotpink, pink, white);
	background-image : radial-gradient(lightpink, skyblue);

# box
	box-sizing: content-box;	/* 기본값 */
	box-sizing: border-box;	/* border까지 width/height에 포함된다. */
	box-shadow: 20px 5px gray;

# table
	border-collapse: collapse;	/* 단일 선표시 */
	font-weight: 900;
	text-align:center;
	vertical-align:middle;


# layout
	column-count:3;
	column-gap: 50px;	/* 단 사이의 간격 */
	column-rule: 1px solid black;	/* 구분선 */
	column-width:auto;

= 3개 단 하나씩


# list
ol[순서있는 리스트]태그의 list-style-type
	1. decimal: 1, 2, 3, ... 
	2. decimal-leading-zero: 01, 02, 03, ...
	3. lower-roman: 그리스 소문자
	4. upper-roman: 그리스 대문자
	5. lower-alpha: 알파벳 소문자
	6. upper-alpha: 알파벳 대문자
	7. none

# visibility, display
	/* 
		인라인레벨태그: span, a
		블록레벨태그   : div, p, pre, ul, ol, li 
	 */
	 
	 /* 
	 	인라인레벨태그들이 불가능한 작업
	 	1. width
	 	2. height
	 	3. text-align
	  */
	display: flex;	속성을 주면 쉽게 수평 배치가 된다.

# overflow
	/* 넘치면 스크롤을 자동으로 만든다. */
		overflow: auto;
	
	/* 스크롤을 만든다. */
		overflow: scroll;
	
	/* 넘친 부분만 숨긴다. */
		overflow: hidden;
	
	/* 넘쳐도 보여준다. */
		overflow: visible;
# float
	/* 
		수평 레이아웃 방법
		
		1. float과 clear이용
			: 마지막 float뒤에 clear를 삽입한다.
		2. overflow와 float 이용
			1) 부모 태그는 overflow: hidden;
			2) 자식 태그는 float: left;
		3. display 이용
			1) 부모 태그는 display: flex;
			2) 부코 태그는 flex-direction: row; ()
			
	 */

# clear
	/* float: left; 에서 벗어나시오. (left, right, both)*/
		clear:left;


# position
	/* 
		position 속성 값
		
		1. static: 원래 배치되려는 곳에 배치된다.
					top, bottome, left, right가 동작하지 않는다.
					position의 기본값이다.
		2. relative: 원래 배치되려는 곳에 배치된다. [부모]
					 top, bottom, left, right가 동작한다.
		3. absolute: 직접 배치하려는 것이다. [자식]
					배치되는 기준 위치는 static이 아닌 부모 요소이다.
					주로 relative인 부모가 사용된다.
					부모 기준으로 top, bottom, left, right가 동작한다.
	 */

	/* 브라우저 창을 기준으로 고정시킨다. 항상 그 자리에 고정된다. */
	position: fixed;	

	/* top(부모기준)에서 100px 떨어지세요. */
	top:100px;	

# z-index
	/* 
		z-index
		
		1. 앞 뒤 순서를 조정하는 속성이다.
		2. 정수값을 가진다.
		3. 상대적으로 높은 값이 앞에 나타나고 낮은 값이 뒤에 나타난다.
		4. position이 relative, absolute, fixed인 경우에만 적용된다.
		5. 같은 depth의 요소끼리 비교한다.
			: 부모-자식은 다른 depth, 형제끼리는 같은 depth
	 */
	
	z-index: 1[2,..];	/* 같은 depth끼리만 비교가능 클수록 앞에 위치 */

# animation
	#box1{
		animation-name : animation1;
		animation-duration: 2s;	/* 2초  지속시간*/	
		animation-timing-function: ease;	/* 진행시간. ease : 천천히갔다가 빠르게 다시 천천히 */
		animation-iteration-count: infinite;	/* 다시 무한반복 iteration-되폴이 */
		animation-delay: 500ms;		/* 0.5초 지속시간*/
	}
	@keyframes animation1 { 
		/* from ~ to */
		from{
			background: red;
		}
		to{
			background:orange;
		}
		n%{/* %로 구간 설정(100%) */}
		
	}

# transform
  회전
	transform: rotate(45deg); 	/* 시계방량 45도 회전 */
  이동
	transform: translate(500px,50px); /* 가로방향 500px, 세로방향 50px 이동 */
  크기
	transform:scale(1.5, 0.5);	/* 가로 1.5배, 세로 0.5배 커진다. */
  기울임
	transform:skew(45deg);	/* 45도 기울임 */


	<!--아이콘 -->
	<!-- 
		1. 아이콘을 제공하는 CDN을 찾는다.
			(cdnjs.com)
		2. fontawesome에서 제공하는 CDN중 css를 찾는다.
		3. 해당 CDN(주소)을 복사해서 <link>태그의 href 속성에 붙여넣는다. (link 태그 자체를 복사할 수도 있다.)
		4. fontawesome.com에 접속해서 원하는 아이콘을 검색하고 태그를 복사한다.
	 -->



-----------------------javascript-------------------------------

	/* 자바스크립트는 자바와 주석이 같다. */
	// 자바스크립트는 자바와 주석이 같다.
	
	/* 
		1. 기본 자료형
			1) 숫자: number
			2) 문자열 : String
			3) 논리: boolean
			4) 객체 : object
			5) 널 : null				(타입은 아는데 저장된 값이 없다.)
			6) 언디파인드: undefined (=정의되지 않았다.) (타입을 모른다.)
			
	*/
	
	/* 
		2. 변수 선언
			1) 타입을 구분해서 명시하지 않는다.
			2) 선언 방법
				var 변수명;
			3) 타입의 결정은 최초 저장된 갓에 의해서 결정된다.
				var a = 10;			// a의 타입은 number
				var b = 'hello';	// b의 타입은 string
				var b = "hello";	// " ", ' ' 상관없음
				var c;				// c의 타입은 undefined
			4) var를 통해서 변수 선언을 하지 않아도 사용할 수 있다.
			5) 기본 초기화 값
				(1) 숫자: 0
				(2) 문자열: null
				(3) 논리: false
				(4) 객체: null
				
	*/


	/* 
		결과 출력 방식
		1. 경고창: window.alert('경고메시지')
		2. 콘솔창: console.log('로그메시지')
		3. 브라우저창: document.write('html 태그 작성')
	*/


	/* 
		형 변환
		1. 숫자로 변환:Number(값)
			1) 정수로 변환: parseInt(값)
			2) 실수로 변환: parseFloat(값)
		2. 문자열로 변환: String(값)
	*/


	/* 
		1. 산술연산자
			1) +, -, *
			2) ** : 제곱 (2 ** 3; 2의 3제곱:8)
			3) / : 나누기 (7 / 2: 3.5)
			4) % : 나머지 (7 % 2: 1)
			5) 몫
				(1) parseInt(7 / 2): 3
				(2) Math.floor(7 / 2): 3
			6) ++ : 1증가
			7) -- : 1갑소
	*/
	/* 
		2. 문자열 연산자
			1) + : 연결 연산자 (문자열이 하나라도 있으면 무조건 연결)
			2) -, *, **, /, %: 연산이 가능한 문자열이면 산술 연산으로 처리된다.
			
	*/

	/* 
		3. 관계 연산자
			1) >, >=, < , <=
			2) == 	: 값을 비교
			3) === 	: 값과 타입을 함께 비교
			$) != 	: 값을 비교
			5) !== 	: 값과 타입을 함께 비교
	*/

	/* 
		4. 논리 연산자
			1) &&
			2) ||
			3) !
			4) short circuit evaluation
				(1) && : false인 조건식이 나타나면 더 이상 진행하지 않는다. 결과는 false이니까
				(2) || : true인 조건식이 나타나면 더 이상 진행하지 않는다. 결과는 true니까
	*/
	
	/*  
		5. 조건 연산자
			1) 조건식 ? 조건식의 결과가 true일 때 : 조건식의 결과가 false일 때
	*/

	/* 
		1. 경고창: window.alert('경고메시지')
		2. 입력창: window.prompt('입력메시지')
			- 주의: 모든 입력은 '문자열'이다.
		3. 확인창: window.confirm('확인메시지')
			- 결과는 확인버튼(true), 취소버튼(false)

	// '계속 진행할까요?'
	// 확인 버튼을 누르면 '진행합니다.'
	// 취소 버튼을 누르면 '취소합니다.''
	if(confirm('계속 진행할까요?')){
		alert('진행합니다.');
	}else{
		alert('취소합니다.');
	}

	*/

	// 1. 날짜/시간 생성
	
	// 1) 현재 날짜와 시간
	var now = new Date();
	console.log('now = ' + now);
	
	// 2) 특정 날짜(타임스탬프)
	var date1 = new Date(1000 * 60 * 60 * 24 * 360);
	console.log('date1(1970년 1월 1일에서 1년 후) = ' + date1);
	
	// 3) 특정 날짜(년, 월, 일)
	var date2 = new Date(2020, 12, 17);	// 월은 +1, 0부터 시작한다.
	console.log('date2(1달 후) = ' + date2);
	
	// 4) 특정 날짜(년, 월, 일, 시, 분, 초)
	var date3 = new Date(2020, 10, 17, 18, 11, 30);	// 2020-11-17 18:11:30
	console.log('date3 = '+ date3);
	
	// 5) 특정 날짜('년-월-일, 년/월/일')
	var date4 = new Date('2020-05-06');	// 2020-05-06
	console.log('date4 = ' + date4);
	
	// 2. 원하는 정보만 추출
	// 1) 년 : getFullYear()
	// 2) 월(0~11) : getMonth()
	// 3) 일(0~31) : getDate()
	// 4) 요일번호(0~6) : getDay(), 0은 일, 1은 월, ... 6은 토
	// 5) 시간(0~23): gerHours()
	// 6) 분(0~59) : getMinutes()
	// 7) 초(0~59) : getSeconds()
	// 8) 밀리초(0~999) : getMilliseconds()
	// 9) 밀리초(타임스탬프: 1970년  1월 1일 이후의 몇 밀리초가 지났는지 추출) : getTime()



	// 1. 정수 난수 발생
	// Math.random() 	  : 0 이상 1 미만의 실수 난수 발생
	// Math.random() * 10 : 0 이상 10 미만의 실수 난수 발생
	// parseInt(Math.random() * 10) 	: 0 이상 10 미만의 정수 난수 발생
	// parseInt(Math.random() * 10) + 1 : 1 이상 11 미만의 정수 난수 발생
	var dice = parseInt(Math.random()*6) + 1;	// 1부터 시작하는 6개의 난수
	alert(dice);
	
	// 2. 실수 난수 발생
	// Math.random() : 0  이상 1 미만의 실수 난수 발생
	// 백분율로 환산 	 : 0% 이상 100% 미만의 백분율 난수 발생 (확률 처리)
	alert(Math.random() < 0.1 ? '대박' : '꽝');


	console.log('파이 값: ' + Math.PI);
	console.log('제곱: ' + Math.pow(2,3));
	console.log('절대값: ' + Math.abs(-5));
	console.log('최대값: ' + Math.max(1,2,3));
	console.log('최소값: ' + Math.min(1,2,3));
	console.log('반올림: ' + Math.round(123.456));
	console.log('올림: ' + Math.ceil(123.456));
	console.log('내림: ' + Math.floor(123.456));
	console.log('절사: ' + Math.trunc(123.456));
	console.log('루트: ' + Math.sqrt(4));


/* 
		JSON : JavaScript Object Notation
		
		1. 자바스크립트 객체 표현 방법
		2. 적은 양의 데이터를 저장하는 컨테이너 역할
		3. 주고 받는 표준 형식 중 하나 (많이 사용)
		4. JSON 형식
			{
				"속성": "문자열",
				"속성": 숫자,
				"속성": "날짜",
				"속성": [
					배열요소,
					배열요소,
					...
				],
				"속성": {
					"속성": 값
				}
			}
		5. JSON 데이터의 변환 과정 이해
			1) JSON -> String JSON -> 자바스크립트 객체
			2) 사용 메소드
				(1) stringify(): JSON -> string -> JSON
				(2) parse(): string JSON -> 자바스크립트 객체
	*/


	// 1. JSON을 보내는 곳에 있는 오리지널 JSON라고 가정
	var person = {
		"name" : "에밀리",
		"age" : 20,
		"birthday" : "2001-11-20"
	}; 
				
	
	// 2. string 으로 변환되서 데이터가 넘어 올 수 있다.
	// JSON -> string JSON 		위 문장을 String형식으로 바꾼다.	,보내주기 위해서 변환, 클라이언트 서버에서 바꿔주기 위해서.. 등등 사용
								// 자바는 stringify 기능이 없다. 직접 수기로 해야한다.
	var strPerson = JSON.stringify(person);
	
	console.log(strPerson);	// {"name":"에밀리","age":20,"birthday":"2001-11-20"}
	
	// 3. String 타입의 JSON 데이터를 자바스크립트 객체로 변환해서 사용한다.
	// String JSON -> 자바스크립트 객체
	var woman = JSON.parse(strPerson);
	
	/* 
		age: 20
		birthday: "2001-11-20"
		name: "에밀리"
	*/
	console.log(woman.name);
	console.log(woman.age);
	console.log(woman.birthday);



	var str = 'sqlsession'; 
	
	console.log(str.length);			// 10
	console.log(str.charAt(0));			// s
	console.log(str.indexOf('s'));		// 0 (첫 번째 s의 인덱스)
	console.log(str.indexOf('S'));		// -1 (없는 경우)
	console.log(str.lastIndexOf('s'));	// 6 (마지막 s의 인덱스)
	console.log(str.toLowerCase());		// 소문자로 변형
	console.log(str.toUpperCase());		// 대문자로 변형
	console.log(str.replace('s','')); 	// s를 빈문자형으로 바꿔라. qlsession(첫 번째 s를 공백문자로 바꿈)
	console.log(str.substring(3));		// session
	console.log(str.substring(0, 3));	// ession (인덱스 3부터 끝까지)
	console.log(str.substring(1, 3));	// 1
	
	var data = '    hello     ';
	console.log(data.trim());			// hello (앞 뒤 모든 공백을 제거한다.)
	console.log(data.trimLeft()); 		// 'hello     ' (왼쪽 공백만 제거한다.)
	console.log(data.trimRight()); 		// '     hello' (오른쪽 공백만 제거한다.)
	
	var list = ['hello', 'java', 'web'];
	var result = list.join(' ');					// list[0] + ' ' + list[1] + ' ' + list[2];
	
	var str = 'hello java web';
	var list = str.split(' ');  		// ['hello', 'java', 'web']




